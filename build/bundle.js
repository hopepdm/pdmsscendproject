(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _View = require('./script/View360');

var _View2 = _interopRequireDefault(_View);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//maybe
var imgsize = new Image();
imgsize.src = imgURL + '/1/1_0.jpg';
imgsize.onload = function () {
    var config1 = {
        container: document.getElementById('container'),
        imgsURL: imgURL,
        count: imgCounts,
        lev1Size: {
            width: imgsize.width,
            height: imgsize.height
        },
        lev2Size: {
            width: imgsize.width * 2,
            height: imgsize.height * 2
        },
        lev3Size: {
            width: imgsize.width * 6,
            height: imgsize.height * 6
        },
        horizontal: imgsize.width < imgsize.height ? 8 : 12,
        vertical: imgsize.width < imgsize.height ? 12 : 8
    };
    var viewer = new _View2.default(config1);
    viewer.init();
};

},{"./script/View360":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var View360 = function () {
    function View360(config) {
        _classCallCheck(this, View360);

        this.container = config.container;
        this.imgsURL = config.imgsURL;
        this.count = config.count;
        this.currentFrame = 0;

        this.lev1Size = config.lev1Size;
        this.lev2Size = config.lev2Size;
        this.lev3Size = config.lev3Size;

        this._height = this.container.clientHeight;
        this._width = this.container.clientWidth;

        //宽高比比率
        this.proportion = this.lev1Size.width / this.lev1Size.height;
        this._mainCanvas = document.createElement('canvas');
        this._mainContext = this._mainCanvas.getContext('2d');

        this._lev1Canvas = document.createElement('canvas');
        this._lev1Context = this._lev1Canvas.getContext('2d');

        this._lev2Canvas = document.createElement('canvas');
        this._lev2Context = this._lev2Canvas.getContext('2d');

        this._lev3Canvas = document.createElement('canvas');
        this._lev3Context = this._lev3Canvas.getContext('2d');

        this._helpCanvas = document.createElement('canvas');
        this._helpContext = this._helpCanvas.getContext('2d');

        this._lev1ImgsPath = [];
        this._lev2ImgsPath = [];
        this._lev3ImgsPath = [];
        this._lev1Imgs = [];
        this._lev2Imgs = [];
        this._lev3Imgs = [];

        //初始缩放级别
        this.detai = 1;

        //画布初始着色点
        this._starty = 0;
        this._endx = this._height * this.proportion;
        this._endy = this._height;

        this.mouse = {};

        this.mouseState = {
            down: false,
            move: false
        };
        this.handState = {
            zoom: true,
            turn: true,
            move: false
        };
        this.timer = 0;

        //加载级别数组判定
        this.isloading2 = [];
        this.isloading = [];
        this.isloading.length = this.count;
        for (var i = 0; i < this.count; i++) {
            this.isloading[i] = 'false';
            this.isloading2[i] = 'false';
        }
        this.horizontal = config.horizontal;
        this.vertical = config.vertical;
        //console.log(this.isloading);
        //设置播放状态
        this.autoplay = false;
    }

    //获取图片路径，基本不用改


    _createClass(View360, [{
        key: '_createImgsPath',
        value: function _createImgsPath() {
            for (var i = 0; i < this.count; i++) {
                var src = this.imgsURL + '/1/1_' + i + '.jpg';
                this._lev1ImgsPath.push(src);
            }
            for (var _i = 0; _i < this.count; _i++) {
                var _src = this.imgsURL + '/2/2_' + _i + '.jpg';
                this._lev2ImgsPath.push(_src);
            }
            for (var _i2 = 0; _i2 < this.count; _i2++) {
                var tmp = [];
                var base = this.imgsURL + '/3/' + _i2 + '/3_' + _i2;
                for (var j = 0; j < 96; j++) {
                    var url = base + '_' + j + '.jpg';
                    tmp.push(url);
                }
                this._lev3ImgsPath.push(tmp);
            }
            //console.log(this._lev3ImgsPath);
        }

        //加载一级图片

    }, {
        key: '_loadimg',
        value: function _loadimg() {
            var _this2 = this;

            //console.log('come loading1');
            // const _this = this;
            var lev1Promise = this._lev1ImgsPath.map(function (item) {
                return new Promise(function (resolve, reject) {
                    var img = new Image();
                    img.src = item;
                    img.onload = function () {
                        return resolve(img);
                    };
                    img.onerror = function (err) {
                        return reject(err);
                    };
                });
            });

            Promise.all(lev1Promise).then(function (imgs) {
                _this2._lev1Imgs = imgs;
                _this2.render();
            }).catch(function (err) {
                return console.log(err);
            });
        }
    }, {
        key: '_loadLev2Img',
        value: function _loadLev2Img() {
            var _this3 = this;

            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            //console.log('come loading2');
            var lev2Promise = new Promise(function (resolve, reject) {
                var img = new Image();
                img.src = _this3._lev2ImgsPath[index];
                img.onload = function () {
                    return resolve(img);
                };
                img.onerror = function (err) {
                    return reject(err);
                };
            });

            lev2Promise.then(function (imgs) {
                _this3._lev2Imgs[index] = imgs;
            }).catch(function (err) {
                return console.log(err);
            });
        }
    }, {
        key: '_loadLev3Img',
        value: function _loadLev3Img() {
            var _this4 = this;

            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            //console.log('come loading3');

            var lev3Promise = this._lev3ImgsPath[index].map(function (item) {
                return new Promise(function (resolve, reject) {
                    var img = new Image();
                    img.src = item;
                    img.onload = function () {
                        return resolve(img);
                    };
                    img.onerror = function (err) {
                        return reject(err);
                    };
                });
            });
            Promise.all(lev3Promise).then(function (imgs) {
                var offsetW = 0;
                var offsetWs = [];
                var offsetH = 0;
                var offsetHs = [];
                var counts = 0;
                for (var i = 1; i <= _this4.vertical; i++) {

                    offsetH += imgs[i * _this4.horizontal - 1].height;
                    offsetW = 0;
                    for (var j = 1; j <= _this4.horizontal; j++) {
                        counts++;
                        offsetW += imgs[1 * j - 1].width;
                        //console.log(this._helpCanvas.width, this._helpCanvas.height);

                        offsetHs.push(offsetH - imgs[i * _this4.horizontal - 1].height);
                        offsetWs.push(offsetW - imgs[1 * j - 1].width);
                        var m = counts - 1;
                        _this4._helpContext.drawImage(imgs[m], offsetWs[m] / 2, offsetHs[m] / 2, imgs[m].width / 2, imgs[m].height / 2);
                    }
                }

                //console.log(offsetWs, offsetHs);
                var _img = new Image();
                _img.src = _this4._helpCanvas.toDataURL();
                _img.onload = function () {
                    _this4._lev3Imgs[index] = _img;
                };
            });
        }
    }, {
        key: 'init',
        value: function init() {
            //创建相应的功能按钮,左右切换
            var btn = document.createElement('div');
            btn.setAttribute('class', 'btn');
            var left = document.createElement('div');
            var right = document.createElement('div');
            left.setAttribute('class', 'left dir');
            right.setAttribute('class', 'right dir');
            btn.appendChild(left);
            btn.appendChild(right);
            document.body.appendChild(btn);

            //创建播放按钮
            var playBtn = document.createElement('div');
            playBtn.setAttribute('class', 'playBtn play');
            btn.appendChild(playBtn);

            this._mainCanvas.width = this._width;
            this._mainCanvas.height = this._height;
            this._lev1Canvas.width = this.lev1Size.width;
            this._lev1Canvas.height = this.lev1Size.height;
            this._lev2Canvas.width = this.lev2Size.width;
            this._lev2Canvas.height = this.lev2Size.height;
            this._lev3Canvas.width = this.lev3Size.width;
            this._lev3Canvas.height = this.lev3Size.height;
            this._helpCanvas.width = this.lev3Size.width / 2;
            this._helpCanvas.height = this.lev3Size.height / 2;
            this.container.appendChild(this._mainCanvas);

            this._createImgsPath();
            this._loadimg();
            this.eventHandler();
        }
    }, {
        key: 'drawLev1Img',
        value: function drawLev1Img() {
            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var img = this._lev1Imgs[index];
            // const num = img.width / img.height;
            this._lev1Context.drawImage(img, 0, 0, img.width, img.height, 0, 0, img.width, img.height);
            return {
                canvas: this._lev1Canvas,
                width: img.width,
                height: img.height
            };
        }
    }, {
        key: 'drawLev2Img',
        value: function drawLev2Img() {
            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var img = this._lev2Imgs[index];
            // const num = img.width / img.height;
            this._lev2Context.drawImage(img, 0, 0, img.width, img.height, 0, 0, img.width, img.height);
            return {
                canvas: this._lev2Canvas,
                width: img.width,
                height: img.height
            };
        }
    }, {
        key: 'drawLev3Img',
        value: function drawLev3Img() {
            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var img = this._lev3Imgs[index];
            // const num = img.width / img.height;
            this._lev3Context.drawImage(img, 0, 0, img.width, img.height, 0, 0, img.width, img.height);
            return {
                canvas: this._lev3Canvas,
                width: img.width,
                height: img.height
            };
        }
    }, {
        key: 'mainDraw',
        value: function mainDraw(canvas, sx, sy, sw, sh, x, y, w, h) {
            //this._mainContext.fillStyle = 'rgba(255, 255, 255, 0.1)';
            this._mainContext.clearRect(0, 0, this._width, this._height);
            //this._mainContext.fillRect(0, 0, this._width, this._height);
            this._mainContext.drawImage(canvas, sx, sy, sw, sh, x, y, w, h);
        }
    }, {
        key: 'eventHandler',
        value: function eventHandler() {
            var _this5 = this;

            var mousewheelevt = /Firefox/i.test(navigator.userAgent) ? "DOMMouseScroll" : "mousewheel";
            var _this = this;
            var dir = {
                left: false,
                right: false
            };
            var onmouseDown = function onmouseDown(event) {
                event.preventDefault();
                event.stopPropagation();
                _this.mouseState.down = true;
                _this.mouse._x = event.clientX;
                _this.mouse._y = event.clientY;
            };
            var onmouseMove = function onmouseMove(event) {
                event.preventDefault();
                event.stopPropagation();
                _this.mouseState.move = true;
                _this.mouse.x = event.clientX;
                _this.mouse.y = event.clientY;

                if (!_this.autoplay) {
                    var deltax = _this.mouse.x - _this.mouse._x;
                    var deltay = _this.mouse.y - _this.mouse._y;
                    dir.left = deltax > 0; //true 向右
                    dir.right = deltax < 0;
                    // console.log(dir);
                    _this.mouse._x = _this.mouse.x;
                    _this.mouse._y = _this.mouse.y;
                    _this.turn(dir);
                    _this.move(_this.mouse.x, _this.mouse.y);
                }
                //console.log(_this.mouse);
                this.mouse = _this.mouse;
                //console.log(this.mouse);
            };
            var onmouseWheel = function onmouseWheel(event) {
                //event.preventDefault();
                event.stopPropagation();
                var wheelDir = (event.wheelDelta || -event.detail) > 0 ? 1 : 0; //0  down 小 1 up 大
                _this.zoom(wheelDir);
                //console.log(event.wheelDelta);
            };
            var onmouseUp = function onmouseUp(event) {
                event.preventDefault();
                event.stopPropagation();
                _this.mouseState.down = false;
                dir.left = false;
                dir.right = false;
            };
            var onWindowResize = function onWindowResize(event) {
                window.location.reload();
            };
            this._mainCanvas.addEventListener('mousedown', onmouseDown, false);
            this._mainCanvas.addEventListener('mousemove', onmouseMove, false);
            this._mainCanvas.addEventListener('mouseup', onmouseUp, false);
            document.oncontextmenu = function () {
                return false;
            };

            //兼容wheel事件
            if (document.attachEvent) {
                document.attachEvent('on' + mousewheelevt, ommouseWheel);
            } else {
                this._mainCanvas.addEventListener(mousewheelevt, onmouseWheel, {
                    passive: true
                });
            }

            document.getElementsByClassName('playBtn')[0].addEventListener('click', function () {
                if (!_this5.autoplay) {
                    document.getElementsByClassName('playBtn')[0].setAttribute('class', 'playBtn stop');
                    _this5.autoplay = true;
                } else {
                    document.getElementsByClassName('playBtn')[0].setAttribute('class', 'playBtn play');
                    _this5.autoplay = false;
                }
            });
            document.getElementsByClassName('right')[0].addEventListener('click', function () {
                _this5.currentFrame--;
            });
            document.getElementsByClassName('left')[0].addEventListener('click', function () {
                _this5.currentFrame++;
            });
            window.addEventListener('resize', onWindowResize, false);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this6 = this;

            this.timer++;
            //重置当前Frame
            this.currentFrame >= this.count ? this.currentFrame = 0 : this.currentFrame < 0 ? this.currentFrame = 44 : this.currentFrame;
            var param = this.drawLev1Img(this.currentFrame);
            if (this.isloading2[this.currentFrame] == 'false') {
                this.isloading2[this.currentFrame] = 'true';
                this._loadLev2Img(this.currentFrame);
            }

            //按需加载
            if (this.isloading[this.currentFrame] == 'false' && this.detai >= 8) {
                this.isloading[this.currentFrame] = 'true';
                //console.log(this.isloading, this.currentFrame);
                this._loadLev3Img(this.currentFrame);
            }

            // if (!this._lev2Imgs[this.currentFrame]) this._loadLev2Img(this.currentFrame);
            if (this._lev2Imgs[this.currentFrame]) {
                param = this.drawLev2Img(this.currentFrame);
            }
            if (this._lev3Imgs[this.currentFrame]) {
                param = this.drawLev3Img(this.currentFrame);
            }

            //--开始剪切的起始位置 --被剪切图像的宽高 --在画布上放置的图像的起始位置 --使用的图像的宽高

            var centerX = this._width / 2;
            var centerY = this._height / 2;
            var devX = this.mouse.x - centerX;
            var devY = this.mouse.y - centerY;

            this._startx = (this._mainCanvas.width - this._endx) / 2;

            if (this._endx < this._width) {
                this.mainDraw(param.canvas, 0, 0, param.width, param.height, this._startx, this._starty - devY * (this._endy - this._height) / this._height - (this._endy - this._height) / 2, this._endx, this._endy);
            } else {
                this.mainDraw(param.canvas, 0, 0, param.width, param.height, this._startx + 2 * devX * this._startx / this._width, this._starty - devY * (this._endy - this._height) / this._height - (this._endy - this._height) / 2, this._endx, this._endy);
            }

            requestAnimationFrame(function () {
                _this6.render();
            });

            if (this.autoplay && this.handState.turn) {
                if (this.timer % 30 === 0) this.currentFrame++;
            }
        }

        //左右转向

    }, {
        key: 'turn',
        value: function turn(dir) {
            if (!this.handState.turn) return;
            if (dir.left && this.mouseState.down && this.detai < 8) {

                this.currentFrame--;
            }
            if (dir.right && this.mouseState.down && this.detai < 8) {

                this.currentFrame++;
            }
            this.currentFrame >= this.count ? this.currentFrame = 0 : this.currentFrame < 0 ? this.currentFrame = 44 : this.currentFrame;
        }

        //轮滑缩放

    }, {
        key: 'zoom',
        value: function zoom(dir) {
            if (!this.handState.zoom) return;
            if (dir > 0) {
                this.detai += 1;
                var maxdetai = 15;
                this.detai <= maxdetai ? this.detai : this.detai = maxdetai;
                if (this.detai < maxdetai) {
                    this._endx = this._endx * 1.1;
                    this._endy = this._endy * 1.1;
                } else {
                    this._endx = this._endx;
                    this._endy = this._endy;
                }
            } else {

                this.detai += -1;

                var mindetai = 0;
                this.detai >= mindetai ? this.detai : this.detai = mindetai;
                if (this.detai > mindetai) {
                    this._endx = this._endx / 1.1;
                    this._endy = this._endy / 1.1;
                } else {
                    this._endx = this._height * this.proportion;
                    this._endy = this._height;
                }
            }
            //console.log(this.detai);
        }
    }, {
        key: 'move',
        value: function move(x, y) {
            var center = {
                x: this._width / 5,
                y: this._height / 5
            };
        }
    }]);

    return View360;
}();

exports.default = View360;

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
